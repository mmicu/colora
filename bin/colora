#!/usr/bin/env node

'use strict';

const colorNamer = require('color-namer');
const colorsLib = require('colors');
const fs = require('fs');
const hljs = require('highlight.js');
const htmlparser = require('htmlparser2');
const parserlib = require('parserlib');
const path = require('path');
const program = require('commander');
const util = require('util');

const pkg = require('../package.json');

var EXIT = {
  SUCCESS: 0,
  FAILURE: 1
};

var SUPPORTED_COLORS = [
  'black',
  'red',
  'green',
  'yellow',
  'blue',
  'magenta',
  'cyan',
  'white',
  'gray',
  'grey'
];

var _Utils = {
  isString: function(s) {
    return typeof s === 'string' || s instanceof String;
  },
  isArray: function(arr) {
    return Array.isArray(arr);
  },
  isBoolean: function(b) {
    return b === true || b === false;
  },
  isNull: function(v) {
    return v === undefined || v === null;
  }
};

var getColor = function(key, color) {
  var isBackgroundAttr = function(s) {
    return s === 'background' || s === 'background-color';
  };

  var colors = colorNamer(color)['basic'] || [];
  
  for (var i = 0, l = colors.length; i < l; ++i) {
    var c = colors[i]['name'] || null;
    if (_Utils.isNull(c)) continue;

    if (isBackgroundAttr(key) && c.length > 0)
      c = 'bg' + c[0].toUpperCase() + c.substring(1, c.length);
    if (c in colorsLib)
      return colorsLib[c];
  }

  return null;
};

var HTML_to_Terminal = {}
  // color
HTML_to_Terminal['color'] = function(color) {
  return getColor('color', color);
};
  // background & background-color
HTML_to_Terminal['background'] = function(color) {
  return getColor('background', color);
};
HTML_to_Terminal['background-color'] = function(color) {
  return getColor('background-color', color);
};
  // font-weight
HTML_to_Terminal['font-weight'] = function(fontWeight) {
  // normal|bold|bolder|lighter|number|initial|inherit
  return colorsLib[fontWeight];
};
  // font-style
HTML_to_Terminal['font-style'] = function(fontStyle) {
  // normal|italic|oblique|initial|inherit
  return colorsLib[fontStyle];
};
  // text-decoration
HTML_to_Terminal['text-decoration'] = function(textDecoration) {
  // none|underline|overline|line-through|initial|inherit
  return colorsLib[textDecoration];
};

var Theme = function(name, path) {
  if (!_Utils.isString(name) || !_Utils.isString(path))
    throw '"name" and "path" must be two strings';

  this.name = name;
  this.path = path;
  this.selectors = {};
  this.selectorsSize = 0;
  this._currentSelectors = [];
};

Theme.prototype.addSelector = function(selector) {
  if (!_Utils.isString(selector))
    throw '"selector" must be a string';

  if (!(selector in this.selectors)) {
    this.selectors[selector] = {};
    ++this.selectorsSize;
  }
  if (!this._currentSelectors.includes(selector))
    this._currentSelectors.push(selector);
};

Theme.prototype.addProperty = function(property, value) {
  if (!_Utils.isString(property) || !_Utils.isString(value))
    throw '"property" and "value" must be two strings';
  if (!_Utils.isArray(this._currentSelectors))
    throw 'Invalid selectors';

  for (var i = 0, l = this._currentSelectors.length; i < l; ++i) {
    var selectorName = this._currentSelectors[i];

    if (!(selectorName in this.selectors))
      throw util.format('First time encountered selector "%s"', selectorName);

    this.selectors[selectorName][property] = value; // overwrite duplicates
  }
};

Theme.prototype.getPropertyBySelector = function(property, selector) {
  if (!_Utils.isString(property) || !_Utils.isString(selector))
    throw '"property" and "selector" must be two strings';

  var selectorProperties = this.selectors[selector] || {};

  return selectorProperties[property] || null;
};

Theme.prototype.getPropertiesBySelector = function(selector) {
  if (!_Utils.isString(selector))
    throw '"selector" must be a string';

  return this.selectors[selector] || null;
};

Theme.prototype.parseCSS = function(callback) {
  var cssParser = new parserlib.css.Parser({
    starHack: true,
    underscoreHack: true
  });
  const self = this;

    // listeners:
  cssParser.addListener('startrule', function(event) {
    event.selectors.forEach(function(selector) {
      selector.parts.forEach(function(part) {
        if (part instanceof parserlib.css.SelectorPart && _Utils.isNull(part.elementName)) {
          part.modifiers.forEach(function(modifier) {
            self.addSelector(modifier.toString());
          });
        }
      });
    });
  });

  cssParser.addListener('endrule', function(event) {
    self._currentSelectors = [];
  });

  cssParser.addListener('property', function(event) {
    self.addProperty(event.property.toString(), event.value.toString());
  });

  cssParser.addListener('error', function(event) {
    callback({ 
      error: true,
      desc: util.format('parser error: %s (line: %d, col: %d)', 
                        event.message, Number(event.line), Number(event.col))
    });
  });
  
  cssParser.addListener('endstylesheet', function() {
    callback({ error: false, desc: null });
  });

  // caller should handle exception
  cssParser.parse(fs.readFileSync(this.path, 'utf8'));
}

function getCSSPath(themesPath, themeName) {
  if (!_Utils.isString(themesPath) || !_Utils.isString(themeName))
    throw '"themesPath" and "themeName" must be two strings';

  if (!fs.existsSync(themesPath))
    throw util.format('Path "%s" does not exist', themesPath);

  const ext = '.css';
  var themePath = null;
  var files = [];
  
  try {
    files = fs.readdirSync(themesPath);
  } catch (e) { }

  for (var i = 0, l = files.length; i < l; ++i) {
    var file_ = files[i];
    if (path.extname(file_) === ext && (path.basename(file_) === themeName ||
        path.basename(file_, ext) === themeName))
      return path.join(themesPath, file_);
  }

  return null;
}

function getMaxLineLength(lines) {
  var getTextFromHTMLLine = function(HTMLLine) {
    var ret = '';
    var htmlParser = new htmlparser.Parser({
      ontext: function(text) {
        ret += text;
      }
    }, { decodeEntities: true });
    htmlParser.write(HTMLLine);
    htmlParser.end();
    
    return ret;
  };
  
  if (!_Utils.isArray(lines))
    throw '"lines" must be an array';
  
  var numLines = lines.length;
  if (numLines === 0) return 0;
  
  var textLines = [];
  for (var i = 0; i < numLines; ++i) {
    var trimLine = lines[i].trim();
    try {
      textLines.push(getTextFromHTMLLine((trimLine.length > 0 ? lines[i] : trimLine)));
    } catch (e) { }
  }
  
  var max = textLines[0].length; // |textLines| > 0
  for (var i = 0; i < numLines; ++i)
    max = Math.max(textLines[i].length, max);
    
  return max;
}

function appendColouredFunctions(themeObj, selector, modifiersList) {
  if (_Utils.isNull(themeObj))
    throw '"themeObj" cannot be null';
  if (!_Utils.isString(selector))
    throw '"selector" must be a string';
  if (!_Utils.isArray(modifiersList))
    throw '"modifiersList" must be an array';
    
    // { selector : value, ..., selector : value }
  var properties = themeObj.getPropertiesBySelector(selector);
  if (!_Utils.isNull(properties)) {
    for (var selector in properties) {
      if (properties.hasOwnProperty(selector) && selector in HTML_to_Terminal) {
        var func = HTML_to_Terminal[selector](properties[selector]);
        if (!_Utils.isNull(func)) modifiersList.push(func);
      }
    }
  }
}

function applyModifiers(modifiersList, text) {
  if (!_Utils.isArray(modifiersList))
    throw '"modifiersList" must be an array';
  if (!_Utils.isString(text))
    throw '"text" must be a string';
  
  if (modifiersList.length === 0) return text;
  
  for (var i = modifiersList.length - 1, colorApplied = false; i >= 0; --i) {
    try {
      var styleName = modifiersList[i]['_styles'][0];
      
      if (!_Utils.isNull(styleName) && (!colorApplied || !(styleName in SUPPORTED_COLORS))) {
        text = modifiersList[i](text);
        if (!colorApplied && styleName in SUPPORTED_COLORS)
          colorApplied = true;
      }
    } catch (e) { }
  }
  
  return text;
}

function printColouredCode(themeObj, data, language) {
  var hljsObj = _Utils.isString(language)
    ? hljs.highlight(language, data)
    : hljs.highlightAuto(data);
  var htmlContent = !_Utils.isNull(hljsObj)
    ? hljsObj.value
    : null;
  
  if (_Utils.isNull(htmlContent)) {
    console.log(data);
  } else {
    var htmlContentToList = htmlContent.split('\n');
    var maxLength = getMaxLineLength(htmlContentToList);
      // list of functions
    var modifiersList = [];
      // apply hljs's properties
    appendColouredFunctions(themeObj, '.hljs', modifiersList);
    
    for (var i = 0, l = htmlContentToList.length; i < l; ++i) {
      var line = htmlContentToList[i];
      var howManyPops = 0;
      var totalLen = 0;
      if (line.replace(/\s/g, '').length == 0) continue;
      
      var htmlParser = new htmlparser.Parser({
        onopentag: function(name, attrs) {
          if (name === 'span') {
            var oldLen = modifiersList.length;
            
            appendColouredFunctions(themeObj, '.' + attrs['class'], modifiersList);
            howManyPops = modifiersList.length - oldLen;
            if (howManyPops < 0) howManyPops = 0; // just to be sure...
          }
        },
        onclosetag: function(name) {
          if (name === 'span' && modifiersList.length > 0 && howManyPops > 0) {
            if (howManyPops > modifiersList.length)
              throw 'Too many Array.pop()';
            
            for (var i = 0; i < howManyPops; ++i) modifiersList.pop();
            howManyPops = 0;
          }
        },
        ontext: function(text) {
          totalLen += (!_Utils.isNull(text)) ? text.length : 0;
          process.stdout.write(applyModifiers(modifiersList, text));
        }
      }, { decodeEntities: true });
      htmlParser.write(line);
      htmlParser.end();
      
      var nRepeat = maxLength - totalLen;
      if (nRepeat < 0) nRepeat = 0;
      process.stdout.write(applyModifiers(modifiersList, ' '.repeat(nRepeat)) + '\n');
    }
  }
}

function colora(sourceCode, language, theme, themesPath) {
    // directory that contains all *.css files
  themesPath = path.resolve(themesPath);
  if (!fs.existsSync(themesPath)) {
    console.error(util.format('Path "%s" does not exist', themesPath));
    return EXIT.FAILURE;
  }
    // with the theme name we can obtain its path
  var themePath = getCSSPath(themesPath, theme);
  if (_Utils.isNull(themePath)) {
    console.error(util.format('Cannot find style "%s" in "%s"', theme, themesPath));
    return EXIT.FAILURE;
  }
    // language is not mandatory. highlight.js can detect it
  if (!_Utils.isNull(language) && _Utils.isNull(hljs.getLanguage(language))) {
    console.error(util.format('highlight.js does not support language "%s"', language));
    return EXIT.FAILURE;
  }
    // parse CSS & print the source code by applying the theme
  var themeObj = new Theme(theme, themePath);
  themeObj.parseCSS(function(data) {
    var errorKey = 'error';
    var descKey = 'desc';
    
    if (!(errorKey in data) || !(descKey in data)) {
      console.error('Data returned from "parseCSS" is not valid');
      return EXIT.FAILURE;
    }
    
    var error = data[errorKey];
    if (error) {
      var desc = data[descKey];
      if (_Utils.isNull(desc)) desc = 'unknown error';
      console.error(util.format('Unable to parse CSS: %s', desc));
      return EXIT.FAILURE;
    }
    
    try {
      printColouredCode(themeObj, sourceCode, language);
    } catch (e) {
      console.error(util.format('Unable to apply theme: %s', e));
      return EXIT.FAILURE;
    }
    
    return EXIT.SUCCESS;
  });
}

function main(argc, argv) {
  program
    .version(pkg.version)
    .usage('<themes path> <theme> [options]')
    .option('-f, --file [file]', 'Source file')
    .option('-l, --language [lang]', 'Programming language')
  program.parse(process.argv);
  
  var file = program.file || null;
  var language = program.language || null;
  var themesPath = program.args[0] || null;
  var style = program.args[1] || null;
  
  if (_Utils.isNull(themesPath) || _Utils.isNull(style)) {
    console.error('You need to specify the themes path and the theme. Use -h or --help');
    process.exit(EXIT.FAILURE);
  }
  
  if (_Utils.isNull(file)) {
    process.stdin.resume();
    process.stdin.setEncoding('utf8');
    process.stdin.on('data', function(data) {
      process.exit(colora(data, language, style, themesPath));
    });
  } else {
    if (!fs.existsSync(file)) {
      console.error(util.format('File "%s" does not exist', file));
      process.exit(EXIT.FAILURE);
    }
    
    process.exit(colora(fs.readFileSync(file, 'utf8'), language, style, themesPath));
  }
}

if (typeof require !== 'undefined' && require.main === module)
  main(process.argv.length, process.argv);

exports.MyUtils = _Utils;
exports.Theme = Theme;
