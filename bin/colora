#!/usr/bin/env node

'use strict';

const fs = require('fs');
const hljs = require('highlight.js');
const parserlib = require('parserlib');
const path = require('path');
const util = require('util');

// @ Utils
function isString(s) {
  return typeof s === 'string' || s instanceof String;
}

// @ Theme class
var Theme = function(name, path) {
  if (!isString(name) || !isString(path)) throw '"name" and "path" must be two strings';
  
  this.name = name;
  this.path = path;
  this.selectors = new Map();
};

Theme.prototype.addSelector = function(selector) {
  if (!isString(selector)) throw '"selector" must be a string';
  
  if (!this.selectors.has(selector)) this.selectors.set(selector, new Map());
};

Theme.prototype.addProperty = function(selector, property, value) {
  if (!isString(selector) || !isString(property) || 
      !isString(value)) throw '"selector", "property" and "value" must be three strings';
  
  if (!this.selectors.has(selector)) this.addSelector(selector);
  
  var selector = this.selectors.get(selector);
  if (!selector.has(property)) selector.set(property, []);
  selector.get(property).push(value);
};

function getThemesList(themesPath) {
  if (!fs.existsSync(themesPath)) return null;
  
  var themesPaths = {};
  fs.readdirSync(themesPath).forEach(file => {
    if (path.extname(file) == '.css')
      themesPaths[path.parse(file).name] = path.join(themesPath, file);
  });
  
  return themesPaths;
};

process.stdin.resume();
process.stdin.setEncoding('utf8');
process.stdin.on('data', function(data) {
  if (process.argv.length !== 3) {
    console.error(util.format('Usage: node %s <styles directory>', process.argv[1]));
    process.exit(1);
  }
  
  var themesPaths = getThemesList(process.argv[2]);
  
  if (themesPaths === null) {
    console.error(util.format('Cannot find styles in ("%s")', process.argv[2]));
  } else {
    var cssContent = fs.readFileSync(themesPaths[process.argv[2]], 'utf8');
    var res = process.argv.length > 3 
      ? hljs.highlight(process.argv[3], data) 
      : hljs.highlightAuto(data);
    var output = htmlout.withCSS(cssContent);

    console.log(output('<pre class="hljs">' + res.value + '</pre>'));
  }
});

exports.isString = isString;
exports.Theme = Theme;
